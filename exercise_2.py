'''Необхідно створити функцію generator_numbers, яка буде аналізувати текст, ідентифікувати всі
дійсні числа, що вважаються частинами доходів, і повертати їх як генератор. Дійсні числа у тексті
записані без помилок, чітко відокремлені пробілами з обох боків. Також потрібно реалізувати функцію
sum_profit, яка буде використовувати generator_numbers для підсумовування цих чисел і обчислення
загального прибутку.'''
# Імпортуємо для того щоб позначати наші функції
from typing import Callable, Generator

def is_float(text: str) -> bool:
    '''Для того щоб функція generator_numbers виглядала чистішою'''
    # перевіряємо отриманий аргумент ніде не зберігаючи
    try: # це щось типу функції isdigit() тільки для float
        float(text)
        return True
    # якщо він кидає помилку то повертаємо False 
    except ValueError:
        return

def generator_numbers(text: str) -> Generator:
    '''Функція приймає рядок знаходить всі числа в ньому і повертає їх в генераторі'''
    # використовуємо повноцінний цикл, бо важливо щоб yield повертав саме числа, а не comprehension
    for i in text.split():
        # перевіряємо на float за допомогою нашої новоствореної функції
        if not is_float(i):
            continue
        yield float(i) # якщо пройшло перевірку повертаємо ОДНЕ число і цикл повторюється

def sum_profit(text: str, func: Callable) -> float:
    '''Функція приймає рядок і функцію яку потрібно застосувати до рядка щось типу map
    тільки з іншою логікою'''
    # отримавши генератор чисел, ми можемо перетворити його на список і обчислити що і робимо
    return sum(list(func(text)))
